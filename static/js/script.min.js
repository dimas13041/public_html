function navigateTo(e) {
  document
    .querySelector(".price-constructor__nav--active")
    .classList.remove("price-constructor__nav--active");
  document
    .querySelector(".price-constructor__mobile-nav--active")
    .classList.remove("price-constructor__mobile-nav--active");
  document
    .querySelector(`.price-constructor__nav[data-step-id="${e}"]`)
    .classList.add("price-constructor__nav--active");
  document
    .querySelector(`.price-constructor__mobile-nav[data-step-id="${e}"]`)
    .classList.add("price-constructor__mobile-nav--active");
}
function slideNext() {
  const e = document.querySelector(".price-constructor__step--active").dataset
    .stepId;
  e >= 4 || slideTo(+e + 1);
}
function slidePrev() {
  const e = document.querySelector(".price-constructor__step--active").dataset
    .stepId;
  e <= 1 || slideTo(+e - 1);
}
function slideTo(e) {
  const t = document.querySelector(".price-constructor__step--active"),
    r = document.querySelector(`.price-constructor__step[data-step-id="${e}"]`);
  t.classList.remove("price-constructor__step--active"),
    r.classList.add("price-constructor__step--active"),
    r.scrollIntoView({ behavior: "smooth" }),
    navigateTo(e);
}
let counstructorUserData = {
  carMake: "",
  carModel: "",
  carYear: "",
  rugBackgroundColor: "beige",
  rugOutlineColor: "beige",
  setType: "",
};
const globalPristineConfig = {
    classTo: "form-field",
    errorClass: "form-field--error",
    errorTextParent: "form-field",
    errorTextTag: "p",
    errorTextClass: "form-help",
  },
  stepForms = document.querySelectorAll(
    ".price-constructor__step[data-step-id]"
  ),
  pristineStepForms = {};
stepForms &&
  stepForms.forEach((e) => {
    const t = { ...globalPristineConfig };
    3 == e.dataset.stepId &&
      ((t.classTo = "constructor-step__title"),
      (t.errorTextParent = "constructor-step__title")),
      (pristineStepForms[e.dataset.stepId] = new Pristine(e, t)),
      e.addEventListener("submit", (t) => {
        t.preventDefault();
        pristineStepForms[e.dataset.stepId].validate() && slideNext();
      });
  });
const mobileNextButton = document.querySelector(
    ".price-constructor__mobile-button--right"
  ),
  mobilePrevButton = document.querySelector(
    ".price-constructor__mobile-button--left"
  ),
  navButtons = document.querySelectorAll(".price-constructor__nav");
mobileNextButton.addEventListener("click", (e) => {
  const t = document.querySelector(".price-constructor__step--active");
  pristineStepForms[t.dataset.stepId].validate() && slideNext();
}),
  mobilePrevButton.addEventListener("click", (e) => {
    slidePrev();
  }),
  navButtons &&
    navButtons.forEach((e) => {
      e.addEventListener("click", (e) => {
        const t = document.querySelector(".price-constructor__step--active")
            .dataset.stepId,
          r = e.target.dataset.stepId,
          o = pristineStepForms[t];
        if (t < r) {
          if (!o.validate()) return;
        }
        slideTo(r);
      });
    });
const carMakeSelectEl = document.getElementById("car-make"),
  carModelSelectEl = document.getElementById("car-model"),
  carYearSelectEl = document.getElementById("car-year"),
  bgColorSelectEl = document.getElementById("rug-background-color"),
  outlineColorSelectEl = document.getElementById("rug-outline-color"),
  rugImage = document.querySelector(
    '[data-step-id="2"] .constructor-step__image img'
  ),
  carMakeSelect = NiceSelect.bind(carMakeSelectEl, { searchable: !0 }),
  carModelSelect = NiceSelect.bind(carModelSelectEl, { searchable: !0 }),
  carYearSelect = NiceSelect.bind(carYearSelectEl, { searchable: !0 }),
  bgColorSelect = NiceSelect.bind(bgColorSelectEl),
  outlineColorSelect = NiceSelect.bind(outlineColorSelectEl);
bgColorSelect.update(), outlineColorSelect.update();
const marksUrl = "https://api.auto.ria.com/categories/1/marks/";
async function getModelsByMake(e) {
  const t = await fetch(marksUrl + e + "/models");
  return await t.json();
}
function handleCarSelect(e) {
  const t = e.target,
    r = t.name,
    o = t.value;
  counstructorUserData[r] = o;
}
function handleColorSelect(e) {
  handleCarSelect(e),
    (rugImage.src = `./static/images/price-constructor/color-combinations/${counstructorUserData.rugBackgroundColor}-${counstructorUserData.rugOutlineColor}.jpg`);
}
document.addEventListener("DOMContentLoaded", async () => {
  const e = +new Date().getFullYear();
  for (let t = 1990; t <= e; t++) {
    const e = `<option value="${t}">${t}</option>`;
    carYearSelectEl.insertAdjacentHTML("beforeend", e);
  }
  carYearSelect.update();
}),
  carMakeSelectEl.addEventListener("change", async (e) => {
    const t = e.target,
      r = t.value,
      o = t.options[t.selectedIndex].textContent;
    (counstructorUserData.carMake = o), (counstructorUserData.carModel = "");
    const a = await getModelsByMake(r);
    a &&
      ((carModelSelectEl.innerHTML =
        "<option selected value disabled>Car model</option>"),
      a.forEach((e) => {
        const t = `<option value="${e.name}">${e.name}</option>`;
        carModelSelectEl.insertAdjacentHTML("beforeend", t);
      }),
      carModelSelect.update());
  }),
  carModelSelectEl.addEventListener("change", handleCarSelect),
  carYearSelectEl.addEventListener("change", handleCarSelect),
  bgColorSelectEl.addEventListener("change", handleColorSelect),
  outlineColorSelectEl.addEventListener("change", handleColorSelect),
  document.addEventListener("click", (e) => {
    const t = e.target.closest(".card-step__button");
    if (!t) return;
    const r = t.value;
    (counstructorUserData[t.name] = r),
      t.closest(".constructor-step").setTypeInput.setAttribute("value", r);
    const o = document.querySelector(".card-step--active");
    o && o.classList.remove("card-step--active"),
      t.closest(".card-step").classList.add("card-step--active");
  });
const constructorForm = document.querySelector(
    ".price-constructor__step[data-step-id='4']"
  ),
  giftForm = document.getElementById("gift-form"),
  giftPristine = new Pristine(giftForm, globalPristineConfig),
  feedbackForm = document.getElementById("feedback-form"),
  feedbackPristine = new Pristine(feedbackForm, globalPristineConfig),
  submitToast = {
    text: "Your message was sent successfully!",
    duration: 1e5,
    close: !0,
    gravity: "bottom",
    position: "center",
    stopOnFocus: !0,
    offset: { y: 50 },
    className: "form-submit-toast",
  };
async function sendPost(e, t) {
  return fetch(t, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(e),
  }).then((e) => {
    if (e.ok) return e.json();
    throw new Error("Something went wrong!");
  });
}
function getCurrentDate() {
  const e = new Date();
  return new Intl.DateTimeFormat("en-GB", {
    dateStyle: "short",
    timeStyle: "short",
    timeZone: "America/Toronto",
  }).format(e);
}
feedbackForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  if (!feedbackPristine.validate()) return;
  const t = e.target["user-email"],
    r = e.target["user-name"],
    o = e.target["user-message"],
    a = await sendPost(
      {
        userEmail: t,
        userName: r.value,
        userMessage: o.value,
        date: getCurrentDate(),
      },
      "/questions"
    );
  Toastify({ ...submitToast, text: a.message }).showToast(),
    (r.value = ""),
    (t.value = ""),
    (o.value = "");
}),
  giftForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    if (!giftPristine.validate()) return;
    const t = e.target["user-phone"],
      r = await sendPost(
        { userPhone: t.value, date: getCurrentDate() },
        "/phone-number"
      );
    Toastify({ ...submitToast, text: r.message }).showToast(), (t.value = "");
  }),
  constructorForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const t = e.target["user-name"],
      r = e.target["user-email"],
      o = e.target["user-phone"];
    counstructorUserData = {
      ...counstructorUserData,
      userName: t.value,
      userEmail: r.value,
      userPhone: o.value,
      date: getCurrentDate(),
    };
    const a = await sendPost(counstructorUserData, "/order");
    Toastify({ ...submitToast, text: a.message }).showToast(),
      (t.value = ""),
      (r.value = ""),
      (o.value = "");
  });
